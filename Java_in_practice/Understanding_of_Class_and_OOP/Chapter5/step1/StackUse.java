/*
 * 자바 가상머신 (JVM) 은 운영체제 위에서 동작한다.
 * JVM 은 운영체제로부터 할당받은 메모리 공간을 기반으로 자바 프로그램을 실행한다.
 * JVM 은 운영체제로부터 할당받은 메모리 공간을 이용해서 자기 자신도 실행하고, 자바 프로그램도 실행한다.
 * 
 * 자바 가상머신의 메모리 모델 : 메서드 영역, 스택 영역, 힙 영역
 * 메모리 공간 활용의 효율성을 높이기 위해 메모리 공간을 세 개의 영역으로 구분한다.
 * 
 * 메서드 영역 (Method Area) : 메서드의 바이트 코드, static 변수 및 메서드
 * - 메서드의 자바 바이트코드는 JVM 이 구분하는 공간 중에서 메서드 영역에 저장된다.
 * - static 으로 선언된 클래스 변수 및 static 메서드도 메서드 영역에 저장된다.
 * - 메서드 영역에 저장된 내용은 프로그램 시작 시 로드되고, 프로그램 종료 시 소멸된다.
 * 
 * 스택 영역 (Stack Area) : 지역 변수, 매개 변수
 * - 매개 변수, 지역 변수가 할당되는 메모리 공간이다.
 * - 프로그램이 실행되는 도중에 임시로 할당되었다가 바로 이어서 소멸되는 특징이 있는 변수가 할당된다.
 * - 스택 영역에 저장된 변수는 해당 변수가 선언된 메서드가 종료될 경우 소멸된다.
 * 
 * 힙 영역 (Heap Area) : 인스턴스 (객체)
 * - 인스턴스 (객체) 가 생성되는 메모리 공간이다.
 * - JVM 에 의한 메모리 공간의 정리 (Garbage Collection) 가 이뤄지는 공간이다.
 * - 프로그래머가 할당하고, JVM 이 소멸한다.
 * - 참조변수에 의한 참조가 전혀 이뤄지지 않는 인스턴스가 소멸의 대상이 된다. 따라서 JVM 은 인스턴스의
 * 참조관계를 확인하고 소멸할 대상을 선정한다.
 * 
 * 바이트코드 (Bytecode) : 고급 언어로 작성된 소스 코드를 가상머신이 이해할 수 있는 중간 코드로 컴파일한 것.
 * 가상머신은 이 바이트코드를 각각의 하드웨어 아키텍처에 맞는 기계어로 다시 컴파일한다. 어셈블리어에 가까운 형태를 띈다.
 * 즉, 자바 바이트코드는 자바 가상머신에 의해서 실행되는 코드이다.
 * 
 * Garbage Collection : GC 는 한 번도 발생하지 않을 수 있다. GC 가 발생하면, 소멸의 대상이 되는 인스턴스는 결정되지만
 * 이것이 실제 소멸로 바로 이어지지는 않는다. 인스턴스의 실제 소멸로 이어지지 않은 상태에서 프로그램이 종료될 수도 있는데,
 * 종료될 경우에는 운영체제에 의해 인스턴스가 소멸된다.
 * 
 * System.gc(); Garbage Collection 을 명령하여 Garbage 를 수집한다. (소멸 X)
 * System.runFinalization(); GC 에 의해 소멸이 결정된 인스턴스를 소멸한다.
 */

package step1;

public class StackUse {

	public static void main(String[] args) {
		int num1 = 10;
		int num2 = 20;
		adder(num1, num2);
		System.out.println("-----------------------");
	}
	
	public static int adder(int n1, int n2) {
		int result = n1 + n2;
		return result;
	}

}
