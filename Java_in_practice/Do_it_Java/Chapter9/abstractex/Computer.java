// 추상 클래스 (abstract class)
// 추상 메서드를 포함한 클래스이다.
// 추상 메서드는 구현코드 없이 메서드의 선언만 있다.
// abstract 예약어를 사용한다.
// 추상 클래스는 new (인스턴스화) 할 수 없다.
// 추상 클래스의 반대말로 concrete class가 있다.

// 구현되어야 하는 메서드이지만, 현재 클래스에서는 어떻게 구현해야할지 모르기 때문에 이를 하위 클래스에서 구현하도록 하는 것을 추상 메서드라고 한다.
// 추상 클래스를 상속 받은 하위 클래스는 추상 메서드의 구현에 대한 책임이 있다고 하며, 추상 클래스에서는 추상 메서드의 구현을 하위 클래스에게 위임시켰다고 한다.
// 이때, 일반 메서드인 turnOn과 turnOff의 경우는 추상 메서드와는 달리 하위 클래스에서도 공통으로 사용하는 메서드이다.
// (물론 필요에 따라 오버라이드를 통해 재정의 가능)

package abstractex;

public abstract class Computer {
	public abstract void display(); // {}는 body로서, 이는 구현부 역할을 한다. 이때 구현부를 작성하지 않고, 세미콜론을 붙이면
	// 이는 함수 선언만 하게 되는 것인데, 이때 함수명 앞에 abstract 키워드를 붙여줘야 해당 메서드가 구현부가 작성되지 않고, 선언만 한
	// 추상 메서드 역할을 할 수 있다. 이때 추상 메서드를 사용하기 위해서는 클래스 또한 추상 클래스여야 한다. 따라서 클래스 키워드 앞에
	// abstract 키워드를 붙여줘야 한다.
	// 이때 추상 메서드에 대한 구현은 추상 클래스를 상속받은 하위 클래스에서 구현한다.
	
	public abstract void typing();
	
	// public abstract int add(int x, int y); // 함수의 선언은 중요한 역할을 하는데, 선언 부분에서 확인할 수 있는 함수명, 매개변수, 리턴 값 등을
	// 통해 해당 함수가 어떤 역할을 하는지 알 수 있기 때문이다.
	
	public void turnOn() { // 추상 클래스에서는 추상 메서드 뿐만 아니라, 일반 메서드도 사용 가능하다.
		System.out.println("전원을 켭니다.");
	}
	
	public void turnOff() {
		System.out.println("전원을 끕니다.");
	}
	
	// 추상 클래스를 만드는 이유는 상속을 하기위해 만든다.
}
